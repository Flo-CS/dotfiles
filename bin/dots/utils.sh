#!/usr/bin/env bash

if [[ -z "$DOTS_DIR" ]]; then
	export DOTS_DIR=$(gum input --placeholder "Enter the path to your dotfiles directory" --value "$HOME/.dotfiles")
fi

if [[ -z "$DOTS_ID" ]]; then
	export DOTS_ID=$(gum input --placeholder "Enter your dots ID for machine specific files (e.g.: jean.desktop)" --value "$(basename "$DOTS_DIR")")
fi

# ------------------
# ---- SYMLINKS ----
# ------------------

symlink() {
	local target="$DOTS_DIR/$1"
	local link_name="$2"

	backup_and_delete "$link_name" && mkdir -p "$(dirname "$link_name")" && ln -sT "$target" "$link_name" && log_info "created symlink $link_name -> $target"
}

# -------------------
# ---- TEMPLATES ----
# -------------------

template() {
	local template_file="$DOTS_DIR/$1"
	local output_file="${1%.j2}"

	j2 "$template_file" >"$output_file" && log_info "rendered template $template_file to $output_file"
}

# FIXME: does not seem to work multiple times when the marker is first line
insert_with_marker() {
	local file="$1" marker="$2" content="$3" comment_char_opening="${4:-#}" comment_char_closing="${5:-#}"
	local start="$comment_char_opening AUTOGENERATED START $marker $comment_char_closing"
	local end="$comment_char_opening AUTOGENERATED END $marker $comment_char_closing"

	# Create temp file to preserve original location
	local temp_file=$(mktemp)

	if grep -Fq "$start" "$file" 2>/dev/null; then
		# Replace content between markers
		local start_line=$(grep -Fn "$start" "$file" | cut -d: -f1)
		local end_line=$(grep -Fn "$end" "$file" | cut -d: -f1)

		# Copy before, insert new content, copy after
		{
			head -n $((start_line - 1)) "$file" 2>/dev/null || true
			printf '%s\n%s\n%s\n' "$start" "$content" "$end"
			tail -n +$((end_line + 1)) "$file" 2>/dev/null || true
		} >"$temp_file"
		cp "$temp_file" "$file"
	else
		# Append new content if markers don't exist
		cp "$file" "$temp_file"
		printf '%s\n%s\n%s\n' "$start" "$content" "$end" >>"$temp_file"
		cp "$temp_file" "$file"
	fi

	rm -f "$temp_file"
	log_info "inserted content with marker $marker in $file"
}

# ------------------
# ------ COPY ------
# ------------------

copy() {
	local source="$DOTS_DIR/$1"
	local destination="$2"

	backup_and_delete "$destination" && mkdir -p "$(dirname "$destination")" && cp "$source" "$destination" && log_info "copied $source to $destination"
}

# -----------------
# ---- LOGGING ----
# -----------------

gum_themed() {
	gum style --foreground "$FOREGROUND" --background "$BACKGROUND" --border "$BORDER" --border-background "$BORDER_BACKGROUND" "$@"
}

log_info() {
	gum log --structured --level info "$*"
}

log_warn() {
	gum log --structured --level warn "$*"
}

log_error() {
	gum log --structured --level error "$*"
}

log_success() {
	gum log --structured --level success "$*"
}

log_section() {
	gum_themed style --align center --width 50 "$*"
}

# -----------------
# ---- BACKUP -----
# -----------------

backup() {
	local file="$1"

	if test -L "$file"; then
		return 0
	fi

	if ! test -e "$file"; then
		return 0
	fi

	cp -rf "$file" "${file}.bak" && log_info "backup created ${file}.bak"
}

backup_and_delete() {
	local file="$1"

	if test -L "$file"; then
		rm -f "$file" && log_info "removed symlink $file"
		return 0
	fi

	if ! test -e "$file"; then
		return 0
	fi

	cp -rf "$file" "${file}.bak" && log_info "backup created ${file}.bak" && rm -rf "$file" && log_info "removed file $file"
}

# -----------------
# ----- PKGS ------
# -----------------

pacman_install() {
	log_info "installing packages: $@"
	sudo pacman -S --noconfirm --needed "$@"
}

pacman_uninstall() {
	log_info "uninstalling packages: $@"
	sudo pacman -R --noconfirm "$@"
}

yay_install() {
	log_info "installing yay packages: $@"
	yay -S --needed "$@"
}

"$@"
